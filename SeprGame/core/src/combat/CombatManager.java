package combat;

import combat.actors.CombatPlayer;
import combat.items.Weapon;
import combat.ship.Room;
import javafx.util.Pair;

import java.util.List;

public class CombatManager {
    private CombatPlayer player;
    private CombatPlayer enemy;
    private Boolean isPlayersTurn;

    public CombatManager(CombatPlayer player, CombatPlayer enemy) {
        this.player = player;
        this.enemy = enemy;
        this.isPlayersTurn = true;
    }

    /**
     * Controls the whole process of combat from start to entering minigame.
     * <p></p>
     * FIXME This will not return void when it has finished. Decide on what should be returned.
     */
    private void enterCombat() {
    }

    /**
     * Controls process of deciding what happened after a player took their turn.
     *
     * @param attackReport A report generated by CombatActor which tells the game which weapons were fired and at which
     *                     rooms. Eg: [[Helm, Cannon1],[Sails, Cannon3]]
     * @return damageReport - A report detailing which rooms were hit and for how much damage. See CombatActor >
     * takeTurn() for its use and more info.
     */
    private List<Pair<Room, Integer>> applyTurn(List<Pair<Room, Weapon>> attackReport) {
        return null;
    }

    /**
     * Ends the fight and starts minigame.
     *
     * @return TODO Will end up returning outcome of combat to game manager
     * how this is done depends on implementation
     */
    @SuppressWarnings("JavaDoc")
    private void endCombat() {
    }
}